apiVersion: v1
kind: ConfigMap
metadata:
  name: profile-config
data:
  custom_profles.py: |
    import configparser
    import asyncpg  # Asynchronous PostgreSQL client
    import json
    import logging

    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    # Load database config
    config = configparser.ConfigParser()
    config.read("/dataflow/app/config/dataflow.cfg")
    DB_URL = config.get("database", "database_url")


    async def fetch_profiles_from_db(username):
        """
        Fetches user-specific profiles from PostgreSQL.
        """
        logger.info(f"Connecting to database to fetch profiles for username: {username}")
        try:
            conn = await asyncpg.connect(DB_URL)
            logger.info("Database connection established.")
            
            user_record = await conn.fetchrow("SELECT role FROM \"USER\" WHERE user_name = $1", username)

            if not user_record:
                logger.warning(f"No user record found for username: {username}")
                await conn.close()
                return []

            user_role = user_record["role"]
            logger.info(f"User role for {username}: {user_role}")

            # Fetch profiles available for this role
            profiles = await conn.fetch("SELECT display_name,tags, slug, price, cpu , ram, description, kubespawner_override, eligible_roles FROM \"SERVER_CONFIG\"")
                       
            logger.info(f"User profiles for {profiles}")

              
            await conn.close()

            # Convert to required format
            profile_list = [
                {
                    "display_name": p["display_name"],
                    "slug": p["slug"],
                    "price": p["price"],
                    "ram": p["ram"],
                    "cpu": p["cpu"],
                    "description": p["description"],
                    "tags":json.loads(p["tags"]),
                    "kubespawner_override": json.loads(p["kubespawner_override"])
                }
                for p in profiles if user_role in json.loads(p["eligible_roles"]) 
            ]
            
            logger.info(f"Fetched {len(profile_list)} profiles for role: {user_role}")
            return profile_list

        except Exception as e:
            logger.error(f"Error fetching profiles from database: {e}")
            return []

    async def custom_options_form(spawner):
        """
        Generate a dynamic profile list from the database for each user.
        """
        user_name = spawner.user.name
        spawner.log.info(f"Fetching profiles for user: {user_name}")
        logger.info(f"Fetching profiles for user: {user_name}")

        profile_list = await fetch_profiles_from_db(user_name)

        if not profile_list:
            spawner.log.warning(f"No profiles found for {user_name}, using default profiles.")
            logger.warning(f"No profiles found for {user_name}, using default profiles.")
            profile_list = [
                {
                    "display_name": "small Server",
                    "slug": "cpu",
                    "price": "$99",
                    "description": "Use for developement",
                    "tags":["lightweight"],
                    "ram":"4",
                    "cpu":"2",
                    "kubespawner_override": {"node_selector": {"instance-type": "small"}}
                }
            ]

        spawner.profile_list = profile_list
        logger.info(f"Profile list for {user_name}: {profile_list}")

        return spawner._options_form_default()


    c.KubeSpawner.options_form = custom_options_form
    c.JupyterHub.default_url = '/hub/spawn'
